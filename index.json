[{"content":"This past weekend, I joined Shellphish for a last minute CTF called Cryptoverse\nWhile I\u0026rsquo;m still a crypto n00b, I spent a few hours gathering some flags for the team.\nCrypto Warmup 1 293 solves / 107 points Decode the following ciphertext: cGlwZ3N7cG5yZm5lXzY0X3Nnan0=.\nRemember: CyberChef is your friend.\nThe ciphertext for this challenge had the distinct appearance of base64. The output format was correct, perhaps a simple rotation cipher such as ROT13 will help. This gets us our flag.\nflag: cvctf{caesar_64_ftw}\nWarmup 2 274 solves / 113 points First described by Giovan Battista Bellaso in 1553, this cipher is easy to understand and implement, but it resisted all attempts to break it until 1863, three centuries later.\nRemember: The Key to success is determination.\nfzvxw{hqtegmfr_lw_msf_scrslg_kvwlhyk_fpr_kxg?}\nIf the given key and flag didn\u0026rsquo;t give it away, a quick search could tell you this is likely a Vigenère cipher.\nThrow that in CyberChef and get the flag.\nflag: cvctf{vigenere_is_too_guessy_without_the_key?}\nWarmup 3 313 solves / 102 points You should recognize this instantly.\n-.-. \u0026hellip;- -.-. - ..-. \u0026ndash; \u0026mdash;\u0026ndash; .-. \u0026hellip;.. \u0026hellip;\u0026ndash; .. \u0026hellip; -. \u0026mdash;\u0026ndash; - \u0026hellip;.. \u0026mdash;\u0026ndash; ..-. ..- -.\nNote: Add { and } around the flag. Flag is all lower case.\nDots and dashes screams Morse code. dcode.fr if a great tool for all things decoding, including morse code.\nflag: cvctf{m0r53isn0tfun}\nWarmup 4 73 solves / 387 points Last warmup. You should get it fast if you use any social media.\nＩn sｃｉencｅ fіctіοｎ ｍetａνerse ｉs ｉtｅrａtiｏｎоf the Iｎternｅｔ as a sⅰｎgｌe, universal and immersive virtual world that is facilitated by the use of virtual reality and augmented reality headsets.\nNote: Wrap the message you decoded in cvctf{}.\nNote 2: This challenge involves some steganography tool related to a social media.\nFor this challenge, I tried several things before ultimately being successful. I thought maybe it would have to do with zero-width characters and tried tools like Stegsnow with no luck.\nEventually I found a Twitter Secret Message tool that gave the flag.\nflag: cvctf{secretsaretobeh1dd3n}\nSubstitution 240 solves / 129 points Substitution is a cryptographic technique where a plaintext is replaced by a ciphertext. The ciphertext is a substitution of the plaintext.\nHere is a very simple CTF-related substitution cipher. Find out the flag.\nHxpkdiz kcz Osxe ja x apzhjxs ljvr go jvogimxkjgv azhdijkf hgmpzkjkjgva. Kcziz xiz kcizz hgmmgv kfpza, Uzgpxirf, Xkkxhl Rzozvhz xvr mjyzr. Jo fgd cxwz ojedizr gdk kcz xqgwz mzaaxez, cziz ja fgdi osxe, pszxaz xrr hdisf qixhlzka qzogiz adqmjaajgv: hwhkoxwzifajmpszadqakjkdkjgv\nFor this challenge, I realized hwhkoxwzifajmpszadqakjkdkjgv likely was the flag, hence the first hwhko should map to cvctf. After a little trial and error targeting 1 or 2 letter words, I decrypted with the following:\n1 2 Plaintext: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ Ciphertext: sxhugyocritkmxfpbdlxxnvaxeXXXXXXXCXITXXXFXXDXXJXXAXX Later, I found out quipquip can solve this for us.\nflag: cvctf{averysimplesubstitution}\nCyberMania 42 solves / 443 points I got this piece of ciphertext from my friend who is a Cyber Mania. It must have hidden something\u0026hellip;\nfile: secret.txt\nsecret.txt contains:\n1 NDAgNmIgNzEgNmEgNjkgM2EgMzIgM2QgNDIgM2YgM2QgNzUgMjcgNjIgNmEgM2QgNWQgNjUgMmQgNWMgM2MgNjMgMjggM2IgNzMgM2MgNDEgNDkgNWQgMzUgM2IgNDQgNTcgMzggNzAgM2IgMmYgNDMgMjYgNDIgM2EgMzAgMjggMmMgMmEgNDAgM2IgNTMgNGEgNTYgM2MgMjkgNmQgNTUgMzYgM2EgMmMgMmMgMzQgMmQgNDAgMzkgM2YgMjEgNDAgM2MgNWYgMmMgNzQgNjEgNDEgMzQgNGIgNWIgMjQgM2UgMjMgNjYgNGUgM2IgNDAgNmIgNzAgMjIgNzUgM2QgNWYgNjcgNjAgNTcgM2QgNjEgNDYgNTUgNGIgNDEgMzggNTEgMjEgNmUgM2IgNjUgNmYgNTEgMjkgM2QgMjUgNDcgNzIgMjggNDAgMzcgMzMgNTMgMjMgM2QgMjUgM2YgNzEgMjEgM2EgMmUgNGIgMzQgNTggNDEgMzggMzQgNTMgNDkgM2QgNWQgNDAgNmEgNjkgM2MgMjggNGIgNmUgNjYgM2EgMmUgNDkgMzAgM2QgMzkgNjkgNTkgNWYgM2YgM2MgNjAgNGYgMmEgNjAgM2MgMmEgMjkgNWIgNjMgNDEgMzggNGYgNjUgMzUgMzkgNjkgNTAgMmUgNWUgM2IgNjYgMmIgNGYgM2MgM2EgNDkgNjYgMzUgM2EgMzkgNmQgNTQgNjUgNmUgM2QgNWQgNTQgNGEgNzEgM2MgMjkgNjQgMjQgNjYgM2QgMjkgNGMgNTcgNGUgNDAgNmYgNzUgMzMgNDggM2QgNTkgNGYgNDEgNjcgNDAgM2MgNzQgNGYgNWMgM2EgMmUgMzcgNjAgMzAgM2IgNjYgMjMgNDcgNjYgM2QgMjUgMjQgNTAgNDUgM2QgNzQgNjkgNTEgNDQgM2MgMjggMzkgNjIgM2YgM2UgMjYgMzggMmUgMzUgM2MgNDMgNDMgMjIgNDcgM2IgNGEgNWQgMzYgNGMgM2UgMjIgM2EgNDcgNGMgM2IgNDggM2YgMzcgNjggM2IgMmYgNGEgNmMgNWEgM2IgNjUgNjYgNGIgNTkgM2EgNDkgNjQgNmMgNmEgM2QgMjcgMjUgNDMgNzUgM2IgNDYgNDYgMmQgMjMgM2MgNDUgNDMgNmUgNmIgM2MgNDUgMzQgMzUgNzMgM2QgMjYgNjEgMjEgM2QgM2IgNDggMzUgNTMgNjcgNDAgMzkgNDAgMjYgNWMgMzkgNjYgMjQgNjAgNWIgM2QgNWQgNTIgNzQgM2IgNDAgNmYgNmMgMzkgNDMgNDEgNGYgNGIgMjEgNTMgM2MgMmEgMzIgNjEgNWUgNDAgMzcgM2MgNjUgMjUgNDAgNTQgNDggNGUgMzEgM2EgMzIgNDYgNjAgNGIgM2UgMjMgNjUgMzAgNmUgM2MgMjggMjcgNGEgNzUgM2MgNWYgMmMgNTEgMjIgNDAgNzIgMjIgNTggNmUgM2IgMmQgMjUgNGMgMjYgMzkgNjkgNTAgNzEgMjggNDAgM2IgMzkgM2QgNTYgM2MgMjkgNjQgNWIgNGUgNDEgNGYgNGIgMzkgNjAgM2QgNWYgNzAgNTAgNWQgNDEgNTMgNmEgMmIgNTcgM2QgNzQgNzMgMzMgMjQgM2UgMjYgNGEgMmIgMzMgM2MgNjAgNjkgMmIgMzIgNDAgMzcgNGUgNjQgNDYgM2IgNDQgNDMgNTggM2QgM2IgMmYgNDMgMjMgNmYgM2IgNWYgNTYgMmEgNjMgM2MgNWUgNzAgMjggNDYgNDAgNmYgNWEgNDUgMmYgNDAgNTAgNWYgNzMgNTggNDAgNTQgNWEgNjIgNjUgM2QgMjkgMjkgNTAgNmMgNDEgMzggM2QgNjUgMjggNDEgMzYgM2MgNGQgMzMgNDAgMzcgNGYgNzMgNTQgNDEgNGYgNmYgNTEgNTAgNDEgMzkgNTUgMzEgMjI= After a bit of CyberChef magic\u0026hellip; These emoji\u0026rsquo;s seemed suspicious, so I found cryptoji and it popped out the flag.\nflag: cvctf{3m0j1_c4n_L34K_7h1ng5}\nRSA 1 183 solves / 182 points The n is so large that it\u0026rsquo;s not possible to factor it. Or is it?\nn = 0x7c05a45d02649367ebf6f472663119777ce5f9b3f2283c7b03471e9feb1714a3ce9fa31460eebd9cd5aca7620ecdb52693a736e2fcc83d7909130c6038813fd16ef50c5ca6f491b4a8571289e6ef710536c4615604f8e7aeea606d4b5f59d7adbec935df23dc2bbc2adebbee07c05beb7fa68065805d8c8f0e86b5c3f654e651\ne = 0x10001\nct = 0x35b63f7513dbb828800a6bcd708d87a6c9f33af634b8006d7a94b7e3ba62e6b9a1732a58dc35a8df9f7554e1168bfe3de1cb64792332fc8e5c9d5db1e49e86deb650ee0313aae53b227c75e40779a150ddb521f3c80f139e26b2a8880f0869f755965346cd28b7ddb132cf8d8dcc31c6b1befc83e21d8c452bcce8b9207ab76e\nfactordb allows us to \u0026ldquo;factorize\u0026rdquo; n to find p and q. The rest is plug and chug.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 from Crypto.Util.number import inverse, long_to_bytes # Given: n = 0x7c05a45d02649367ebf6f472663119777ce5f9b3f2283c7b03471e9feb1714a3ce9fa31460eebd9cd5aca7620ecdb52693a736e2fcc83d7909130c6038813fd16ef50c5ca6f491b4a8571289e6ef710536c4615604f8e7aeea606d4b5f59d7adbec935df23dc2bbc2adebbee07c05beb7fa68065805d8c8f0e86b5c3f654e651 e = 0x10001 ct = 0x35b63f7513dbb828800a6bcd708d87a6c9f33af634b8006d7a94b7e3ba62e6b9a1732a58dc35a8df9f7554e1168bfe3de1cb64792332fc8e5c9d5db1e49e86deb650ee0313aae53b227c75e40779a150ddb521f3c80f139e26b2a8880f0869f755965346cd28b7ddb132cf8d8dcc31c6b1befc83e21d8c452bcce8b9207ab76e # FactorDB the given \u0026#39;n\u0026#39; p = 8156072525389912369788197863285751656042515380911795404436333529629416084362735262281722179416240983448945672233749861517470671156357917601583268804973543 q = 10678085245814899631026086851678635624044610674331494223434578587048178556659016077336866548714220013612176819608742965144962254942844889066032236627832071 assert n == p*q phi = (p-1)*(q-1) d = inverse(e, phi) m = pow(ct, d, n) print(long_to_bytes(m)) flag: cvctf{f4c70rDB_15_p0w3rfu1}\nReverse Baby Reverse 239 solves / 130 points Baby warmup.\nfiles: chall\nAfter running the program, it gave the output:\n1 2 You do not really need to run the program... The flag is: cvctf{7h15_15_4_f4k3_fl4g} So, I ran: strings chall | grep cvctf. This gave the flag.\nflag: cvctf{r3v3r53_15_4w350m3}\nBasic Transforms 97 solves / 337 points Basic JS for you to tackle.\nfile: app.js\napp.js contains:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var readline = require(\u0026#39;readline\u0026#39;); var Crypto = require(\u0026#39;vigenere\u0026#39;); var rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: true }); rl.on(\u0026#39;line\u0026#39;, function(line){ if (line.length == 20 \u0026amp;\u0026amp; line.startsWith(\u0026#34;cvctf{\u0026#34;) \u0026amp;\u0026amp; line.endsWith(\u0026#34;}\u0026#34;)) { var cat = Crypto.encode(line.substring(6, line.length - 1), \u0026#34;nodejsisfun\u0026#34;).split(\u0026#39;\u0026#39;).map(function(c) { return String.fromCharCode(c.charCodeAt(0) + 1); }).join(\u0026#39;\u0026#39;); if (Buffer.from(cat.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;)).toString(\u0026#39;base64\u0026#39;) == \u0026#34;QUlgNGoxT2A2empxMQ==\u0026#34;) { console.log(\u0026#34;Correct!\u0026#34;); } } }); For this challenge, I simply used CyberChef again and reversed the cipher.\nHowever, I wasn\u0026rsquo;t getting the full flag upon decoding the Vigenère cipher. So, I reverted back to js using the runkit environment.\nflag: cvctf{0bfu5_N0d3_H@}\nMisc iKUN1 https://www.youtube.com/watch?v=w8bidbK0PI\nFind the flag for iKUN 1, already wrapped in flag format.\nHint: Please find me (CryptoverseCTF) on THE platform for code repositories hosting.\nNote: The YouTube link is unrelated to solving the challenge.\nTHE platform seemed likely to be Github. I was quickly able to find the account, then found a repo with a cvctf{fake_flag_but_correct_repo} bio. I checked the commit history and found the flag:\nflag: cvctf{git_reveals_everything}\nNot Georainbolt 37 solves / 451 points Georainbolt is able to guess the location on Google Map in 0.1 seconds. Can you do it in a second?\nGiven an IP address or a coordinate, tell me which city it is in. All answers are case-insensitive. You will need a space between words, such as \u0026ldquo;new york city\u0026rdquo;.\nFor simplicity, I will make it easy. There are 50 questions and you only need to achieve an accuracy of more than 50% to get the flag!\nnc 137.184.215.151 22606\nAfter connecting, the challenge will prompt the user to guess the city based on IP or Coordinate (as shown below). If you answer in more than 1 second, it\u0026rsquo;s automatically \u0026ldquo;Wrong.\u0026rdquo;\n1 2 3 4 5 IP: 2.145.91.238 City: Coordinate (lat, lon): 45.3747, -75.5647 City: We can script this to solve!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 import time import ipinfo from pwn import * from geopy.geocoders import Nominatim # init ipinfo at = \u0026#39;\u0026lt;REDACTED\u0026gt;\u0026#39; h = ipinfo.getHandler(at) # init geo locator geolocator = Nominatim(user_agent=\u0026#34;geoapiExercises\u0026#34;) r = remote(\u0026#39;137.184.215.151\u0026#39;, 22606) r.recvuntil(b\u0026#39;wrong.\\n\u0026#39;) log.info(\u0026#39;Solving...\u0026#39;) for i in range(50): time.sleep(0.2) q = r.recvuntil(b\u0026#39;City:\u0026#39;) if b\u0026#39;IP\u0026#39; in q: ip = q.split(b\u0026#39;IP: \u0026#39;)[-1].split(b\u0026#39;\\n\u0026#39;)[0].decode() d = h.getDetails(ip) r.sendline(d.city.encode()) else: coor = q.split(b\u0026#39;lon): \u0026#39;)[-1].split(b\u0026#39;\\n\u0026#39;)[0].decode() location = geolocator.reverse(coor) try: city = location.raw[\u0026#39;address\u0026#39;][\u0026#39;city\u0026#39;] except: city = \u0026#39;failed\u0026#39; r.sendline(city.encode()) r.interactive() flag: cvctf{4r3_y0u_4_R34L_Ge@r41nB0L7?}\n","permalink":"https://woadey.github.io/posts/cv22/","summary":"\u003cp\u003eThis past weekend, I joined \u003ca href=\"https://shellphish.net/\"\u003eShellphish\u003c/a\u003e for a last minute CTF called Cryptoverse\u003c/p\u003e","title":"Cryptoverse 2022"},{"content":"A simple writeup for the appointment box from HTB\nnmap Strating with an nmap.\n1 2 3 4 5 6 7 8 9 10 11 # Nmap 7.92 scan initiated Fri Apr 29 16:22:44 2022 as: nmap -sV -sC -oA nmap/appointment 10.129.22.167 Nmap scan report for 10.129.22.167 Host is up (0.12s latency). Not shown: 999 closed tcp ports (reset) PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.38 ((Debian)) |_http-title: Login |_http-server-header: Apache/2.4.38 (Debian) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Apr 29 16:22:56 2022 -- 1 IP address (1 host up) scanned in 12.20 seconds Nothing too interesting here.\ngobuster Pivoted to gobuster to see subdirectories:\ngobuster dir -u http://10.129.22.167 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt\n1 2 3 4 /images (Status: 301) [Size: 315] [--\u0026gt; http://10.129.22.167/images/] /css (Status: 301) [Size: 312] [--\u0026gt; http://10.129.22.167/css/] /js (Status: 301) [Size: 311] [--\u0026gt; http://10.129.22.167/js/] /vendor (Status: 301) [Size: 315] [--\u0026gt; http://10.129.22.167/vendor/] sqlinjection After looking at the webage, the input forms seemed potentially vulnerable to sqlinjection.\nuname=admin'# payload granted the flag.\nflag: e3d0796d002a446c0e622226f42e9672\n","permalink":"https://woadey.github.io/posts/appointment/","summary":"\u003cp\u003eA simple writeup for the \u003ccode\u003eappointment\u003c/code\u003e box from HTB\u003c/p\u003e","title":"HTB: appointment"}]